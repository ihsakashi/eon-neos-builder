### AOSP TREE
ANDROID_BUILD_TOP=$$(ANDROID_BUILD_TOP)
isEmpty(ANDROID_BUILD_TOP) : error("$ANDROID_BUILD_TOP is empty. Forgot to run 'lunch'?")

ANDROID_PRODUCT_OUT=$$(ANDROID_PRODUCT_OUT)
isEmpty(ANDROID_PRODUCT_OUT) : error("$ANDROID_PRODUCT_OUT is empty. forgot to run 'lunch'?")

defineReplace(getAndroidBuildVar) {
    thevar = $$1
    r=$$system(cd $$ANDROID_BUILD_TOP && CALLED_FROM_SETUP=true BUILD_SYSTEM=build/core make --no-print-directory -f build/core/config.mk dumpvar-$${thevar})
    return($$r)
}

# .qmake.cache is not available at mkspec loading time.
# not caching those is horribly slow though

!exists($$PWD/android_build_vars) {
    store_ANDROID_TOOLCHAIN_PREFIX = "ANDROID_TOOLCHAIN_PREFIX=$$getAndroidBuildVar(abs-TARGET_TOOLS_PREFIX)"
    store_ANDROID_TARGET_CFLAGS    = "ANDROID_TARGET_CFLAGS=$$getAndroidBuildVar(TARGET_GLOBAL_CFLAGS)"
    store_ANDROID_TARGET_LDFLAGS   = "ANDROID_TARGET_LDFLAGS=$$getAndroidBuildVar(TARGET_GLOBAL_LDFLAGS)"
    store_ANDROID_TARGET_ARCH      = "ANDROID_TARGET_ARCH=$$getAndroidBuildVar(TARGET_ARCH)"
    store_ANDROID_VERSION          = "ANDROID_VERSION=$$getAndroidBuildVar(PLATFORM_VERSION)"

    write_file(android_build_vars, store_ANDROID_TOOLCHAIN_PREFIX)
    write_file(android_build_vars, store_ANDROID_TARGET_CFLAGS, append)
    write_file(android_build_vars, store_ANDROID_TARGET_LDFLAGS, append)
    write_file(android_build_vars, store_ANDROID_TARGET_ARCH, append)
    write_file(android_build_vars, store_ANDROID_VERSION, append)
}

info(using android build env from cache in $$PWD/android_build_vars . delete this file if you changed your build env )
exists($$PWD/android_build_vars) {
    include($$PWD/android_build_vars)
}

ANDROID_VERSION_SPLIT   = $$split(ANDROID_VERSION, ".")
ANDROID_VERSION_MAJOR   = $$member(ANDROID_VERSION_SPLIT, 0)
ANDROID_VERSION_MINOR   = $$member(ANDROID_VERSION_SPLIT, 1)

MAKEFILE_GENERATOR      = UNIX
QMAKE_PLATFORM          = android
QMAKE_COMPILER          = gcc
QMAKE_INCREMENTAL_STYLE = sublib

include(../common/linux.conf)
include(../common/gcc-base-unix.conf)

ANDROID_PLATFORM        = android-23

CONFIG                 += $ANDROID_PLATFORM
DEFINES                += Q_OS_ANDROID_EMBEDDED # SHOULD AVOID SDK
DEFINES                += Q_ANDROID_VERSION_MAJOR=$$ANDROID_VERSION_MAJOR
DEFINES                += Q_ANDROID_VERSION_MINOR=$$ANDROID_VERSION_MINOR

### EGLFS
QT_QPA_DEFAULT_PLATFORM = eglfs
EGLFS_PLATFORM_HOOKS_SOURCES  = $$PWD/qeglfshooks_surfaceflinger.cpp
EGLFS_PLATFORM_HOOKS_LIBS    += -lui -lgui -lutils -lcutils

### QMAKE SETTINGS
QMAKE_CC                = $${ANDROID_TOOLCHAIN_PREFIX}gcc

QMAKE_CFLAGS            = $${ANDROID_TARGET_CFLAGS}
QMAKE_CFLAGS           -= -Werror=non-virtual-dtor
QMAKE_CFLAGS           -= -DNDEBUG

QMAKE_CFLAGS_WARN_ON    = -Wall -Wextra
QMAKE_CFLAGS_WARN_OFF   = -Wno-psabi

QMAKE_CFLAGS_SHLIB      = -fPIC
QMAKE_CFLAGS_YACC       = -Wno-unused -Wno-parentheses
QMAKE_CFLAGS_THREAD     = -D_REENTRANT
QMAKE_CFLAGS_HIDESYMS   =

QMAKE_CXX               = $${ANDROID_TOOLCHAIN_PREFIX}g++
QMAKE_CXXFLAGS          = $$QMAKE_CFLAGS
QMAKE_CXXFLAGS_WARN_ON  = $$QMAKE_CFLAGS_WARN_ON
QMAKE_CXXFLAGS_WARN_OFF = $$QMAKE_CFLAGS_WARN_OFF
QMAKE_CXXFLAGS_RELEASE += $$QMAKE_CFLAGS_RELEASE
QMAKE_CXXFLAGS_DEBUG   += $$QMAKE_CFLAGS_DEBUG
QMAKE_CXXFLAGS_SHLIB    = $$QMAKE_CFLAGS_SHLIB
QMAKE_CXXFLAGS_YACC     = $$QMAKE_CFLAGS_YACC
QMAKE_CXXFLAGS_THREAD   = $$QMAKE_CFLAGS_THREAD
QMAKE_CXXFLAGS_HIDESYMS = $$QMAKE_CFLAGS_HIDESYMS -fvisibility-inlines-hidden

QMAKE_LINK              = $$QMAKE_CXX
QMAKE_LINK_SHLIB        = $$QMAKE_LINK

QMAKE_AR                = $${ANDROID_TOOLCHAIN_PREFIX}ar cqs
QMAKE_OBJCOPY           = $${ANDROID_TOOLCHAIN_PREFIX}objcopy
QMAKE_NM                = $${ANDROID_TOOLCHAIN_PREFIX}nm -P
QMAKE_STRIP             = $${ANDROID_TOOLCHAIN_PREFIX}strip
QMAKE_RANLIB            = $${ANDROID_TOOLCHAIN_PREFIX}ranlib

### TODO: CHECK HEADER AND LIB LOCATION
QMAKE_INCDIR            = $${ANDROID_BUILD_TOP} \
                          $${ANDROID_BUILD_TOP}/bionic \
                          $${ANDROID_BUILD_TOP}/bionic/libc/include \
                          $${ANDROID_BUILD_TOP}/bionic/libc/arch-common \
                          $${ANDROID_BUILD_TOP}/bionic/libc/private \
                          $${ANDROID_BUILD_TOP}/bionic/libm/include \
                          $${ANDROID_BUILD_TOP}/bionic/libm/include/arm64 \
                          $${ANDROID_BUILD_TOP}/bionic/libstdc++/include \
                          $${ANDROID_BUILD_TOP}/external/icu/icu4c/source/common/ \
                          $${ANDROID_BUILD_TOP}/external/icu/icu4c/source/i18n/ \
                          $${ANDROID_BUILD_TOP}/external/skia/include \
                          $${ANDROID_BUILD_TOP}/frameworks/native/include \
                          $${ANDROID_BUILD_TOP}/frameworks/native/include/gui \
                          $${ANDROID_BUILD_TOP}/frameworks/native/opengl/include \
                          $${ANDROID_BUILD_TOP}/frameworks/base/include \
                          $${ANDROID_BUILD_TOP}/hardware/libhardware/include \
                          $${ANDROID_BUILD_TOP}/hardware/libhardware_legacy/include \
                          $${ANDROID_BUILD_TOP}/hardware/ril-caf/include \
                          $${ANDROID_BUILD_TOP}/system/core/include \
                          $${ANDROID_PRODUCT_OUT}/obj/include

QMAKE_INCDIR           += $${ANDROID_BUILD_TOP}/bionic/libc/arch-$${ANDROID_TARGET_ARCH}/include

QMAKE_LIBDIR            = ${ANDROID_PRODUCT_OUT}/obj/lib
QMAKE_INCDIR_X11        =
QMAKE_LIBDIR_X11        =
QMAKE_INCDIR_OPENGL     =
QMAKE_INCDIR_OPENGL_ES1 =
QMAKE_LIBDIR_OPENGL_ES1 =
QMAKE_INCDIR_OPENGL_ES2 =
QMAKE_LIBDIR_OPENGL_ES2 =

### CHECK LINKER FLAGS
QMAKE_LINK              = $$QMAKE_CXX
QMAKE_LINK_SHLIB        = $$QMAKE_CXX
QMAKE_LFLAGS            = $${ANDROID_TARGET_LDFLAGS} \
                          -L${ANDROID_PRODUCT_OUT}/obj/lib \
                          -Wl,-rpath-link,${ANDROID_PRODUCT_OUT}/obj/lib

QMAKE_LFLAGS_APP        = -Wl,--no-undefined -Wl,-z,noexecstack -shared

QMAKE_LFLAGS_SHLIB      = -Wl,--no-undefined -Wl,-z,noexecstack -shared

QMAKE_LFLAGS_PLUGIN     = $$QMAKE_LFLAGS_SHLIB

QMAKE_LFLAGS_SONAME     =
QMAKE_LFLAGS_NOUNDEF    = -Wl,--no-undefined
QMAKE_LFLAGS_RPATH      = -Wl,-rpath=

QMAKE_LIBS              = -lgnustl_shared -llog -lz -lm -ldl -lc -lgcc

### CHECK QMAKE DEF
QMAKE_LIBS_X11          =
QMAKE_LIBS_X11SM        =
QMAKE_LIBS_QT_THREAD    =
QMAKE_LIBS_QT_OPENGL    =
QMAKE_LIBS_QTOPIA       =
QMAKE_LIBS_THREAD       =
QMAKE_LIBS_OPENGL       =
QMAKE_LIBS_OPENGL_ES1   = -lGLESv1_CM
QMAKE_LIBS_OPENGL_ES2   = -lEGL -lGLESv2 $$QMAKE_LIBS

load(qt_config)